#!/usr/bin/env perl
use strict;
use warnings FATAL => 'all';
use feature qw(:5.24);
use FindBin;
use lib "$FindBin::RealBin/../local/lib/perl5";
use Docopt;
use HTTP::Status;
use LWP;
use Parallel::ForkManager;
use POSIX 'strftime';
use Sys::Hostname 'hostname';

sub _get_http_status {
    my $url = shift @_;
    my $ua = LWP::UserAgent->new();
    return unless $url or $ua;
    my $response = $ua->head($url);
    return $response->code;
}

sub _is_service_running {
    my $service_name = shift @_;
    my $status = `sudo systemctl status $service_name | grep Active`;
    $status && $status =~ /running/;
}

use constant {
    MAX_PROCESSES => 10,
};

my $opt = docopt();
my $is_dry = $opt->{'--dry-run'};
my $when = strftime "%H%M%S", localtime;

say "!!!DRY RUN!!!" if $is_dry;

if ($opt->{lotate}) {
    say "show messages only\n" if $is_dry;
    my $services = $opt->{'--services'};
    for my $service_name (@$services) {
        my $log = $opt->{"--$service_name"};

        next if !_is_service_running($service_name) && !$is_dry;

        my $is_a = `sudo ls $log`;
        if ($is_a !~ /cannot access/) {
            my $old_log = "${log}_old";
            say "rename $log to $old_log";
            system "sudo rm -rf $old_log" unless $is_dry;
            system "sudo mv $log $old_log" unless $is_dry;
        } else {
            say "$log does not exist. do nothing.";
        }

        unless ($opt->{'--no_restart'}) {
            system "sudo systemctl restart $service_name" unless $is_dry;
            say "$service_name restarted";
        }
    }
} elsif ($opt->{profile}) {
    say "show commands only\n" if $is_dry;
    my $kataribe_config = "$FindBin::RealBin/kataribe.toml";
    my $host = hostname;

    my $cmds = {
        kataribe =>
            "cat %K_LOG% | kataribe -f %K_CONFIG% | sed -e '1i[ISULOG] kataribe at ${host}\n\n```' -e '$a```' | discocat --tee --bot %BOT%",
        slow =>
            "sudo pt-query-digest --limit 10 %SLOW_LOG% | cut -b 1-320 | sed -e '1i[ISULOG] pt-query-digest at ${host}\n\n```' -e '$a```' | discocat --tee --bot %BOT%",
        pprof =>
            "cd %WORK_DIR% && rm -rf pprof && rm -rf pprof.png && go tool pprof -png -output pprof.png %URL% && cat pprof.png | discocat --bot %BOT%",
        iftop => "sudo iftop -t -s 5s | sed -e '1i[ISULOG] iftop at ${host}\n\n```' -e '$a```' | discocat --tee --bot %BOT%",
        iotop => "sudo iotop -b -o -t -n 5 | sed -e '1i[ISULOG] iotop at ${host}\n\n```' -e '$a```' | discocat --tee --bot %BOT%",
        dstat =>
            "dstat -c -d -n -g -ys -m -l -r --vm --aio --fs --unix --lock --ipc --tcp -i -p 1 10 | sed -e '1i[ISULOG] dstat at ${host}\n\n```' -e '$a```' | discocat --tee --bot %BOT%",
        dmesg =>
            "sudo dmesg | tail | sed -e '1i[ISULOG] dmesg at ${host}\n\n```' -e '$a```' | discocat --tee --bot %BOT%",
        vmstat =>
            "vmstat 1 | head | sed -e '1i[ISULOG] vmstat at ${host}\n\n```' -e '$a```' | discocat --tee --bot %BOT%",
        mpstat =>
            "mpstat -P ALL 1 5 | sed -e '1i[ISULOG] mpstat at ${host}\n\n```' -e '$a```' | discocat --tee --bot %BOT%",
        pidstat =>
            "pidstat 1 5 | sed -e '1i[ISULOG] pidstat at ${host}\n\n```' -e '$a```' | discocat --tee --bot %BOT%",
        iostat =>
            "iostat -xz 1 5 | sed -e '1i[ISULOG] iostat at ${host}\n\n```' -e '$a```' | discocat --tee --bot %BOT%",
        sardev =>
            "sar -n DEV 1 5 | sed -e '1i[ISULOG] sar dev at ${host}\n\n```' -e '$a```' | discocat --tee --bot %BOT%",
        sartcp =>
            "sar -n TCP,ETCP 1 5 | sed -e '1i[ISULOG] sar tcp at ${host}\n\n```' -e '$a```' | discocat --tee --bot %BOT%",
    };
    my $templates = {
        '%URL%' => do {
            my $url = $opt->{'--url_pprof'};
            if (my $port = $opt->{'--port_pprof'}) {
                $url =~ s#\d{4}#$port#;
            }
            $url;
        },
        '%BOT%' => $opt->{'--bot'},
        '%K_CONFIG%' => $kataribe_config,
        '%K_LOG%' => do {
            my $log = $opt->{'--nginx'};
            $log = $opt->{'--envoy'} if _is_service_running('envoy');
            $log = $opt->{'--h2o'} if _is_service_running('h2o');
            $log;
        },
        '%WORK_DIR%' => $opt->{'--work_dir'},
        '%SLOW_LOG%' => $opt->{'--mysql'},
    };
    for my $key (keys(%$templates)) {
        map { $cmds->{$_} =~ s/$key/$templates->{$key}/g } keys %$cmds;
    }

    # command sets
    $opt->{'--profiling_tools'} = [
        'pprof',
        'dstat',
        'iostat',
        'mpstat',
        'vmstat',
        'iotop',
        'sartcp',
        'dmesg',
        'iftop',
        'sardev',
        'pidstat'
    ] if $opt->{'--profiling_tools'}[0] eq 'load_sets';

    # run commands
    my $pm = Parallel::ForkManager->new(MAX_PROCESSES);
    foreach my $tool (@{$opt->{'--profiling_tools'}}) {
        $pm->start and next;
        if (my $cmd = $cmds->{$tool}) {
            system "cd $FindBin::RealBin && kataribe -generate"
                if $tool eq "kataribe" && !-f $kataribe_config && !$is_dry;

            # next if _get_http_status($templates->{'%URL%'}) != 200 && $tool eq "pprof" && !$is_dry;

            eval { system "$cmd" } unless $is_dry;
            eval { system "echo '$cmd'" } if $is_dry;
        }
        $pm->finish;
    }
    $pm->wait_all_children;
} elsif ($opt->{install}) {
    my $prefix = $opt->{'--prefix'};
    say "installed to $prefix"
        unless system "ln -s $FindBin::RealBin/isulog $prefix";
} elsif ($opt->{uninstall}) {
    my $prefix = $opt->{'--prefix'};
    say "uninstalled from $prefix"
        unless system "rm $prefix/isulog";
}

1;
__END__

=head1 NAME

    isulog -- Daring but convenient tool to run commands for gathering metrics and helping to deploy an app.

=head1 USAGE

    isulog -h | --help
    isulog lotate [--services=<n>...] [--nginx <log>] [--envoy <log>] [--mysql <log>] [--h2o <log>] [--no_restart] [--dry-run]
    isulog profile [--profiling_tools <n>...] [--bot <n>] [--url_pprof <n> | --port_pprof <n>] [--nginx <log> | --envoy <log> | --h2o <log>] [--work_dir <n>] [--dry-run]
    isulog install [--prefix <n>]
    isulog uninstall [--prefix <n>]

    Options:
        --mysql=<log>               MySQL slow.log. [default: /var/log/mysql/slow.log]
        --nginx=<log>               Nginx access.log. [default: /var/log/nginx/access.log]
        --envoy=<log>               Envoy access.log. [default: /var/log/envoy/access.log]
        --h2o=<log>                 h2o access.log. [default: /var/log/h2o/access.log]
        --no_restart                Do not restart Service.
        --prefix=<n>                Directory to install. [default: /usr/local/bin]
        --url_pprof=<n>             Golang pprof endpoint url. [default: http://localhost:1323/debug/pprof/profile]
        --work_dir=<n>              Working directory for tmp files. [default: /tmp]
        -b --bot=<n>                Bot name used by discocat. See discocat.yml fot details. [default: default]
        -h --help                   Show This screen.
        -n --dry-run                Dry run.
        -p --port_pprof=<n>         Golang pprof endpoint port. [http://localhost:%PORT%/debug/pprof/profile]
        -s --services=<n>           Services. [default: nginx envoy h2o mysql]
                                    e.g. % isulog lotate -s nginx -s mysql --dry-run
        -t --profiling_tools=<n>    Profiling tools to run. [default: load_sets]
                                    All available tools:  [ 'dstat', 'iostat', 'slow', 'mpstat', 'vmstat', 'iotop',
                                                            'sartcp', 'dmesg', 'kataribe', 'pprof', 'iftop', 'sardev', 'pidstat' ]
                                    All available tool-sets: [load_sets].
                                    If you want to run tools simultaneously that needs to run durning a load on your app.
                                    e.g. % isulog profile -t pprof -t iftop -t iotop -t dstat -p 3939 --dry-run
                                    If you want to run tools (pprof, kataribe are excluded) simultaneously,
                                    you can specify load_sets instead of specifying all tools separately.
                                    e.g. % isulog profile -t load_sets -p 3939 --dry-run

=head1 AUTHORS

    plainbanana

=cut
